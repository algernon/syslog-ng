syslog-ng Debian sources
========================

These sources are managed with Git (see debian/control), supporting
multiple upstream and multiple debian versions. This is accomplised
with the following branch layout:

 * upstream/mirror/${MAJOR_VERSION}: This is a mirror of the upstream
   master branch of the appropriate major version of syslog-ng. No
   changes are applied to it, ever.
 * upstream/dfsg/${MAJOR_VERSION}: Same as the upstream branch, but
   with non-DFSG-free manual pages removed. The orig.tar.xz is based
   off of this branch.
 * patched/${MAJOR_VERSION}: Non-debian specific patches, that are
   also sent upstream. Based on the upstream/dfsg/${MAJOR_VERSION}
   branch, but no patches are applied directly, they're merged from
   the various feature/${MAJOR_VERSION}/${NAME} branches (see below),
   or cherry-picked from upstream.
 * debian/${MAJOR_VERSION}: Debian packaging for the appropriate major
   version, based on the patched/${MAJOR_VERSION} branch.

Furthermore, a couple of other branches may appear and disappear over
time, that are part of the normal development work flow:

 * feature/${MAJOR_VERSION}/${NAME}: Each feature developed is done on
   a separate branch, and sent upstream as such. These can be picked
   onto the appropriate patched branch.

The orig.tar.xz can be generated by debian/rules get-orig-source. The
packaging does not use the upstream tarballs, as it is built directly
from git.

All of the patches on the patched branch get flattened during build
into a single debian/patches/debian-changes patch. If one wants to
make modifications, that should be done on the appropriate feature
branch, or on the debian brahc, if it is Debian specific.

To build the package from git, one will first need to initialize it,
and set up the branches needed by the system. Running the
debian/tools/bootstrap.sh script is one way to accomplish that.

Merging, patching and whatnot
-----------------------------

To update the package, the following workflow should be kept:

Upgrading to a new upstream version
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Pull the upstream changes as-is onto the appropriate upstream
  branch. (such as upstream/mirror/3.3)
* Merge the upstream mirror branch into the dfsg branch
  (upstream/dfsg/3.3).
* Merge the dfsg branch into the patched branch (patched/3.3).
* Fix any conflicts caused by patches that made it upstream in a
  different way, or by conflicting upstream changes.
* Merge patched into the debian branch (debian/3.3).
* Run debian/tools/update-control.sh ${NEW_UPSTREAM_VERSION}, and
  verify that it correctly updated everything:

  + debian/control should have a libsyslog-ng-${NEW_UPSTREAM_VERSION}
    package, and libsyslog-ng-dev should depend on it.

  + The script should replace the libsyslog-ng-${VERSION}.* files
    (.install and .lintian-overrides) with updated versions. Both the
    filenames and the contents should have the new upstream version.

  Once verified, commit the changes to git. The files generated by the
  scripts are NOT stored in git, one is expected to bootstrap the
  sources by running debian/tools/bootstrap.sh.

Selectively applying upstream fixes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Pull the upstream changes as-is onto the upstream/mirror branch.
* Merge (merge, not rebase!) the upstream branch into upstream/dfsg.
* cherry-pick the appropriate fixes to patched, or - if that is more
  appropriate - merge the dfsg branch into patched as-is.
* Merge the patched branch into the debian branch.

Debian-specific changes
~~~~~~~~~~~~~~~~~~~~~~~

Debian packaging specific changes should directly go to the debian
branch.
